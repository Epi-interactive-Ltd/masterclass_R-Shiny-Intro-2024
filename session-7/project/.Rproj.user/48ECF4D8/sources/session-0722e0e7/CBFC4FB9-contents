# Stage 1
shinyServer(function(input, output) {
  
  filtered_data <- reactive({
    
    if(input$country != "All"){
      data <- world_data %>% filter(
        name_long %in% input$country
      )
    }else if(input$subregion != "All"){
      data <- world_data %>% filter(
        subregion %in% input$subregion
      )
    }else if(input$region != "All"){
      data <- world_data %>% filter(
        region_un %in% input$region
      )     
    }else{
      data <- world_data 
    }
    
     
  })

  observeEvent(input$region, {
    sub_regions <- world_data %>% filter(
      region_un %in% input$region
    ) %>% select(subregion)
    
    updateSelectInput(inputId="subregion",
                      choices=c("All", unique(sub_regions$subregion))
                      )
  })
  
  observeEvent(input$subregion, {
    countries <- world_data %>% filter(
      subregion %in% input$subregion
    ) %>% select(name_long)
    
    updateSelectInput(inputId="country",
                      choices=c("All", unique(countries$name_long)))
  })
  
  
  
  
  output$map <- renderLeaflet({
    leaflet() %>%
      addPolygons(data = world_data, group = "outlines", 
                  stroke = T, weight = 1, color = "#444", opacity = 1, 
                  fill = F)
  })
  
  
  
  # # creating a dynamic colour palette 
  colorpal <- reactive({
    
    colorNumeric(brewer.pal(5, "RdPu"), filtered_data()[[input$highlight]])
    
  })
   
  # # create the base map here, add tiles and the base layer of country shapes
  output$map <- renderLeaflet({
    
    m <- leaflet() %>%
      addTiles() %>%
      addPolygons(data = filtered_data(), group = "outlines",
                  stroke = T, weight = 0.5, color = "#444", opacity = 1,
                  fill = F)
    m
  })
  
  # # when the continent data changes, redraw the highlighted shapes
  observe({
    pal <- colorpal()
   
    if(input$highlight == "gdpPercap"){
      out <- leafletProxy("map") %>%
        clearGroup("highlight") %>%
        addPolygons(data = filtered_data(), group = "highlight",
                    stroke = T, weight = 1, color = "#444", opacity = 1,
                    fillColor = ~pal(gdpPercap), fillOpacity = 0.8, popup = ~popupText)
    }else if(input$highlight == "lifeExp"){
      out <- leafletProxy("map") %>%
        clearGroup("highlight") %>%
        addPolygons(data = filtered_data(), group = "highlight",
                    stroke = T, weight = 1, color = "#444", opacity = 1,
                    fillColor = ~pal(lifeExp), fillOpacity = 0.8, popup = ~popupText)
    }else{ # Alcohol consumption
      out <- leafletProxy("map") %>%
        clearGroup("highlight") %>%
        addPolygons(data = filtered_data(), group = "highlight",
                    stroke = T, weight = 1, color = "#444", opacity = 1,
                    fillColor = ~pal(lifeExp), fillOpacity = 0.8, popup = ~popupText)
    }
    
    
  })
 
  # # use a separate observe to show / hide the legend
  observe({
    pal <- colorpal()

    out <- leafletProxy("map") %>%
      clearControls()
    if(input$country == "All"){
      out <- out %>%
        addLegend(position = "bottomright", pal = pal, values = filtered_data()[[input$highlight]], title=input$highlight)

    }

  })
  
  
})
